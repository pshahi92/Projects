                     +--------------------------+
                     |           CS 439         |
                     | PROJECT 2: USER PROGRAMS |
                     |      DESIGN DOCUMENT     |
                     +--------------------------+

****EACH student submits a (unique) design document.****

---- Name ----

>> Fill your name, UT EID, CS login, email address, and unique number:

Name:
EID:
CS login:
Email:
Unique Number:


Slip days used on this project: 0

---- GROUP ----

>> Fill the names, UT EIDs, CS logins, email addresses, and unique numbers
>> of your group members.  Also fill in each person's ranking on the 
>> partner evaluation scale, as determined by you.

Name1:
EID1:
CS login:
Email:
Unique Number:
Ranking (scale below):

Name2:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):

Name3:
EID2:
CS login:
Email:
Unique Number:
Ranking (scale below):


---- PARTNER EVALUATION SCALE ----

>> Excellent: Consistently went above and beyond - tutored others, carried
>> more than his/her fair share of the load.

>> Very Good: Consistently did what he/she was supposed to do, very well
>> prepared and cooperative.

>> Satisfactory: Usually did what he/she was supposed to do, minimally
>> prepared and cooperative.

>> Marginal: Sometimes failed to show up, rarely prepared.

>> Deficient: Often failed to show up, rarely prepared.

>> Unsatisfactory: Consistently failed to show up, unprepared.

>> Superficial: Practically no participation.

>> No Show: No participation at all.


---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

//inside parseline
1. char *cmd_copy; //strtok_r deletes the string so we need a copy to store file_name

2. char *str_arg; //this is to check the return 

3. char *saveptr; //remaining argument, this is necessary store remainder string from strtok_r func. call

4. int argumentV[128]; //array to store arguments; stores pointers to esp

5. int numArgument = 0; //simple int to iterate through array of arguments

6. uint8_t memPadding = ((unsigned int ) esp ) % 4; //memory alignment (mod 4 bytes in 32 bit machine)
	//this int is to mod the address so that you get correct padding when doing hexdump

//inside load
7. char executable_prog[15];  //The file system limits file names to 14 characters; using an array to store chars

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  
>> How do you avoid overflowing the stack page?

1. First we copy the cmdline arg into another char * string called cmd_copy.
To do so, we allocate memory using cmd_copy = palloc_get_page(0) then use the
memcpy function to deep copy the cmdline arg (file_name) to the new string.

	Note: we have to make a copy because in the next step we use strtok_r to 
	parse the string. We don't want to modify the original argument passed to us
	because what strtok_r does is it deletes the string argument you pass to it.

2. Now we have to parse the copied string in a while loop. Create a new string called 
str_arg to check the return value of strtok_r and use while(str_arg != NULL) to execute 
the while loop. Inside the loop we will just parse the string. 

3. Esp initially is set to the phys_base, which is between the kernel and the stack. 
Therefore, we must decrement esp in order to push each argument into the stack.

4. We then push the arguments onto the stack using memcpy until the string argument is NULL,
which is the end of command line.

5. After pushing the arguments onto the stack we must align the memory of esp by 
adjusting the pointer of esp. Then we push the address dummy 0 into the stack. We 
then push the addresses of the arguments.

6. We then have to push the last address of the address of pushed argument. 

7. We then push the number of arguments. 

8. We then push the void pointer as a return address which can be random. 

>> How do you arrange for the elements of argv[] to be in the right order?
We pushed the arguments into the stack from left to right even though the order 
in which the arguments get pushed dont matter.

We pushed the address backwards.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r is a thread safe version of strtok on POSIX systems
strtok_r takes an extra parameter, q pointer to a char * where it stores its
current state.
The strtok_r() function is a reentrant version strtok(). 
The saveptr argument is a pointer to a char * variable that is used internally by strtok_r() in order to 
maintain context between successive calls that parse the same string.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Need to change: */

The first advantage of Unix approach is that it is much safer and simpler to 
use shell-based parsing operations. This way shell could help check any 
unsafe command line before they arrive at kernel directly, and thus reduce
the complexity of kernel operations.

In Unix-like systems, the separation between executable name and arguments 
enables more complex semantics such as redirection, pipeline in shell 
operations. With Pintos' approach, we would have to add a lot of code in 
kernel to achieve similar goals, and this violates the laying design principle
commonly used in computer system.

Moreover, combined with PATH environment variable, Unix-like shell gives more
flexibility in looking for executable files. Revolving pathname and looking 
for files tend to be expensive, and it is best left to external programs such 
as shell to finish the task as Unix-like systems did. With Pintos' approach,
the kernel would have to undertake the task to look for a file during the 
initialization of a process.
*/

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
